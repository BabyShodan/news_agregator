import logging
import os

from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils.executor import start_webhook
from aiogram import Bot, types

import markups as nav
from api import *


BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
STOCKS_API_KEY = os.getenv("STOCKS_API")
WEATHER_API_KEY = os.getenv("WEATHER_API")
NEWS_API_KEY = os.getenv("NEWS_API")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/news_agregator/{BOT_TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


@dp.message_handler(commands=["start"])
async def show_list(message: types.Message) -> None:
    await bot.send_message(message.from_user.id,
                           f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n"
                           "–Ø –±–æ—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π! ü§ñ \n"
                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é",
                           reply_markup=nav.MainMenu)


@dp.message_handler(Text(equals="–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
async def go_back(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=nav.MainMenu)


@dp.message_handler(Text(equals=["–¶–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å"]))
async def stocks_cos(message: types.Message) -> None:
    """Main menu actions"""
    if message.text == "–¶–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤":
        await bot.send_message(message.from_user.id, "–ö–∞–∫–∏–µ –∞–∫—Ç–∏–≤—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", reply_markup=nav.StocksMenu)
    elif message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É":
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ—Ä–æ–¥.", reply_markup=nav.CitiesMenu)
    elif message.text == "–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å":
        await bot.send_message(message.from_user.id, collect_random_news(NEWS_API_KEY))


@dp.message_handler(Text(equals=["–ê–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π", "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"]))
async def stocks_cos(message: types.Message) -> None:
    if message.text == "–ê–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π":
        await bot.send_message(message.from_user.id,
                               "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞",
                               reply_markup=nav.CompanyMenu)
    elif message.text == "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã":
        await bot.send_message(message.from_user.id,
                               "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞",
                               reply_markup=nav.MoneyMenu)
    elif message.text == "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        await bot.send_message(message.from_user.id,
                               "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞",
                               reply_markup=nav.CryptoMenu)
    else:
        await bot.send_message(message.from_user.id,
                               "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –≤–∞–ª—é—Ç—ã",
                               reply_markup=nav.StocksMenu)


@dp.message_handler(Text(equals=["AAPL", "AAT",
                                 "–†—É–±–ª–∏", "–¢–µ–Ω–≥–µ", "–î–æ–ª–ª–∞—Ä—ã", "–ï–≤—Ä–æ",
                                 "BTC", "ETH", "Solana", "Near", "Ton", "USDT"]))
async def company_stock(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, collect_stocks_data(STOCKS_API_KEY, message.text))


@dp.message_handler(Text(equals=["Moscow", "Krasnodar"]))
async def weather_info(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, collect_weather_data(WEATHER_API_KEY, message.text))


@dp.message_handler()
async def message_reader(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üôÅ \n")


print(__name__)
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
else:
    raise SystemExit("That's is not a module!")
