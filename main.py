import logging
import os

from aiogram.dispatcher import Dispatcher
from aiogram.utils.executor import start_webhook
from aiogram import Bot, types

from api import collect_stocks_data, collect_weather_data


BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
STOCKS_API_KEY = os.getenv("STOCKS_API")
WEATHER_API_KEY = os.getenv("WEATHER_API")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


HEROKU_APP_NAME = os.getenv('HEROKU_APP_NAME')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/news_agregator/{BOT_TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = os.getenv('PORT', default=8000)


async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)


async def on_shutdown(dispatcher):
    await bot.delete_webhook()


@dp.message_handler(commands=["start"])
async def show_list(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n"
                                                 "–Ø –±–æ—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π! ü§ñ \n"
                                                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")


@dp.message_handler(commands=["help"])
async def help_show(message: types.Message) -> None:
    await bot.send_message(message.from_user.id,
                           "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n"
                           "/help - —Ç—ã —Å–µ–π—á–∞—Å –≤–≤—ë–ª/–≤–≤–µ–ª–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É,\n"
                           "/start - –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ –º–Ω–æ–π,\n"
                           "/stocks - —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤,\n"
                           "/weather - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n")


@dp.message_handler(commands=["stocks"])
async def exchange_options(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–ê–∫—Ç–∏–≤—ã –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ")


@dp.message_handler(commands=["weather"])
async def weather_options(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–ü–æ–≥–æ–¥–∞ —Ö–æ—Ä–æ—à–∞—è üåû")


@dp.message_handler()
async def message_reader(message: types.Message) -> None:
    await bot.send_message(message.from_user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã üôÅ \n"
                                                 "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /help")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
else:
    raise SystemExit("That's is not a module!")
